
$(gil-style:register-style
  "body{color:white;background-color:black;}
a:link{color:\#00f0ff;text-decoration:none;}
a:visited{color:#70a0ff;text-decoration:none;}
a:link:hover{text-decoration:underline}
a:visited:hover{text-decoration:underline}")

(section 1 $"Intro" #(Intro)
  Lisp-ed was originally a project to make a new lisp-editor. However, i
  didn't work very project-focussed and made a bunch of other stuff, 
  making the aim more about gui/markup and autodocumentation.
  (b Currently GIL is the main project.)

  (p It is far from 'polished', for instance, i haven't figured out the best 
  way to inferfere with the automatic contents page to the left; the
  regular and packages entries arent separated. Also the autodoc results
  could use improvement and optional manual entering of extra 
  documentation. \(Actually the doc-string itself is also manually 
entered, but it is just good habit to fill those.\))
  
  (p Also some would want to see this page black on white. I prefer it this
     way. It would be nice to be able to add a button to just allow the 
     choice.)

(section 2 $"GIL" #(General Interface Library/Language)
  
  (p I$" " (comment TODO what happens here)
      was annoyed that autodoc\(see below\) could only output in one 
     language. I also simply felt that we needn't have separation between 
     markup, web, and gui, and that Code=data should be 'Code as manifested
     in function usuage'=data.)
   
  (p As such, i made/am making a library that allows one to specify
     documents/guiworks just with methods and functions.\(Macros might be
     useful enough to include, but i'll mostly avoid them.\)  The methods
     are mostly distinguished for purposes of indicating meaning.
     Objects inputted determine the actual content. For instance, strings
     represent text. See  (link $"GIL" at 'GIL')  for more.))

(section 2 $"Scanning code" #(Scanning code)
  Scanning of the code is done in two separate parts:
  (point-list
    #(An implementation of an expression-hook, it effectively reimplements
    CLs macroexpansion for this.)
    #(A scanner that collects information based on the hook. As it works
    with an expression hook, and macro function called in any way can be
    automatically documented, if instructed how to document it.))
  It can be extended by writing expression-hooks.

  (section 4 $"autodoc-scan" #(Autodocumentation)
    Packages (package-link $:expression-scan Expression-scan) and
    (package-link $:expression-hook Expression-hook).))
    
(section 2 $"Autodocumentation" #(Autodocumentation)
  Based on the scan data, so can make documentation from any expression 
  useage. Being annoyed by LML2, and being able to output only html, 
  i made GIL. As described above.

  (p The autodocumentation is extensible by writing document methods and 
     hooks to gather information. Should have better documentation by 
     default though; no documentation of methods, classes etcetera yet.
     Also allowing the user to add extra information in
     documentation aside would be nice.)

  (p It is also very integratable into .gil files and such, onw can just
     do $(mention+ 'gil-autodoc:mention
          (code "(gil-autodoc:mention type name &rest optionally-further-text)"))
     to mention a statement and it should link it, (b if) it is scanned and
     has a appropriate 
     $(mention+ 'gil-autodoc:document)!
     You don't have to also use (code gil-autodoc:) if that is used in the
     package you are reading with. (note See (link $"Todo") for what is 
     still missing.))
  
  (section 4 $"autodoc-autodoc" #(Autodocumentation)
    Package (package-link $:autodoc-gil autodoc-gil).)))

(section 1 $"GIL" #(General Interface Library/Language \(Explanation\))
  
  (execute $"../principles.gil")
  
  See (link $"GIL-use" GIL from user perspective) or 
   the autodocumentation for more.
   
  (section 4 $"gil-autodoc" #(Autodocumentation)
    Packages (package-link $:gil gil), (package-link $:gil-share),
    (package-link $:gil-style), (package-link $:gil-info),
    (package-link $:gil-read), (package-link $:gil-user),
    (package-link $:gil-html).))
  
(section 1 $"GIL-use" #(GIL from user perspective)
  
  (p (b NOTE) except for the autodoc, it just isn't ready for regular 
     users.)
  
  If things get to nested, try 
  (url-link $"http://lisp-umac.berlios.de/main.html" the denest macro),
  which removes nestedness. (package-link $:denest \(autodoc\))

(section 2 $"Conventions" #(Conventions)
  The most important convention is that any function that works on 
  gil-code accepts that prepared/gone-through glist gil-code as the &rest
  last arguments.)
  
(section 2 $"Notation" #(Notation)

  (p The basic lisp notation is less efficient one would want. Particularly
     the \\ and \" needed everywhere is cumbersome. I made a parser that 
     reads s-expressions a little differently, turning parts into strings
     for you. All statements are still effectively function useage; you can
     still just use it as lisp. 
     It seems likely that the alternative notation is more useful if the
      'code' is more data-like, and that
     CL notation is more useful when the code is more 'code-like'.)
  
  (p It basically works by taking everything directly after '\(' to be
     a symbol, 
     and always turning numbers into numbers. Otherwise it is always a 
     string.
     '\\' escapes for a single charactere,
      \$ reads a lisp expression as usual, 
     and #() 
     makes a statement a unit onto itself; if you want \"a b c d\" to be 
     read as \"a b\" \"c d\", you'd do \"#(a b) #(c d)\".
     This is often useful when you are filling the 'object' argument of 
     a function. specifically it turns into (code \(glist :series ...\)))
  
  (p The notation also takes
     (code \{stuff...\}) as (code \(denest stuff...\)))

  (p Optional closing tags for readability on long s-expressions are still
      todo.) (comment TODO)
  
  (p Note that Lisp, defining functions to do stuff for you is a tool to 
     help you write.
      \(Although perhaps i will make other types of tools.\)))

(section 2 $"GIL-fun-use" #(Functions from user-perspective)
    
  Firstly, (b don't) use any of the 'i-...' functions, in data-like code
  these are meant, and if you do, always make the second argument 
  $(mention+ '*lang*), that is how the language is passed.
  \(Which is later deferred to a
(url-link $"http://www.gigamonkeys.com/book/variables.html#dynamic-aka-special-variables"
	   special variable).\)

  (p You can define your own functions to suit your needs.))
  
  TODO further docs.

(comment TODO (section 2 $"GIL-use-examples" #(Examples)
  )
  ))

(section 1 $"Todo" $nil
  Various todo list, first very external bits. 
  (note Some should be different library.)

  (execute $"../todo.gil")
  )

(section 1 $"GIL-output" #(GIL output languages)
  Currently GIL has only html and txt output. There is a file for Latex 
  output but doesn't work well enough. (link $"This library, outputs" see 
  here) for further todos with respect to outputs.)

(section 1 $"Contributors" #(Contributors)
  This has always been one-man project so far, being me,
  
  (p (url-link $"http://www.ojasper.nl/" Jasper den Ouden), 
gmail adress o.jasper.))
